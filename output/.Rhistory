# cl_base_url = "http://dataservices.imf.org/REST/SDMX_JSON.svc/CodeList/"
# ds <- imfDS(db.key)
# codelistIDs <- ds$CodeLists$CodeList
# codelists <- list()
# for(codelistID in codelistIDs){
#   message(codelistID$`@id`)
#   cl_url <- paste0(cl_base_url,codelistID$`@id`)
#   clContent <- getURL(cl_url, httpheader = list('User-Agent' = user_agent), ssl.verifypeer = FALSE, .encoding = "UTF-8")
#   Sys.sleep(1)
#   cl <- fromJSON(clContent)$Structure$CodeLists$CodeList
#   codelists[[codelistID$`@id`]] <- cl
# }
# return(codelists)
listOfLists <- list()
lolIndex <- 1
ds <- imfDS(db.key)
codelists <- ds$CodeLists$CodeList
for(codelist in codelists){
dim.name <- codelist$Name$`#text`
dim.code <- codelist$`@id`
for(code in codelist$Code){
code.val <- code$`@value`
code.desc <- code$Description$`#text`
df <- data.frame(dim.name,dim.code,code.val,code.desc)
listOfLists[[lolIndex]] <- df
lolIndex <- lolIndex + 1
}
}
output.df <- rbindlist(listOfLists)
return(output.df)
}
imfCD <- function(db.key,params="",startPeriod="",endPeriod=""){
user_agent = "di-imf-rsdmx/0.0.1"
cd_base_url = "http://dataservices.imf.org/REST/SDMX_JSON.svc/CompactData/"
cd_url <- paste0(cd_base_url,db.key,"/",params)
if(startPeriod!=""){
if(endPeriod!=""){
cd_url <- paste0(cd_url,"?startPeriod=",startPeriod,"&endPeriod=",endPeriod)
}
else{
cd_url <- paste0(cd_url,"?startPeriod=",startPeriod)
}
}else{
if(endPeriod!=""){
cd_url <- paste0(cd_url,"?endPeriod=",endPeriod)
}
}
cdContent <- getURL(cd_url, httpheader = list('User-Agent' = user_agent), ssl.verifypeer = FALSE, .encoding = "UTF-8")
Sys.sleep(1)
cd <- fromJSON(cdContent)
return(cd)
}
imfDF <- function(db.key,params="",startPeriod="",endPeriod="",reshape=TRUE){
dfList <- list()
dfIndex <- 1
cd <- imfCD(db.key,params,startPeriod,endPeriod)
series <- cd$CompactData$DataSet$Series
# Special case for series being a single list
if("@FREQ" %in% names(series)){
df <- data.frame(db.key)
for(var in names(series)){
# For those not named "obs" we can assign them to vars right away
if(var!="Obs"){
value = series[[var]]
if(typeof(value)=="character"){
df[[var]] <- series[[var]]
}
# Otherwise, we need to check whether "Obs" is a list of observations,
# or a list containing the attributes of one observation
}else{
obs = series[[var]]
single.ob <- FALSE
for(ob in obs){
if(typeof(ob)=="list"){
multivar <- paste0("value.",ob$`@TIME_PERIOD`)
df[[multivar]] <- ob$`@OBS_VALUE`
}else{
single.ob <- TRUE
}
}
if(single.ob){
multivar <- paste0("value.",obs$`@TIME_PERIOD`)
df[[multivar]] <- obs$`@OBS_VALUE`
}
}
}
dfList[[dfIndex]] <- df
dfIndex = dfIndex + 1
}else{
# Each element is like a row, except it can contain more than one observation
for(element in series){
df <- data.frame(db.key)
for(var in names(element)){
# For those not named "obs" we can assign them to vars right away
if(var!="Obs"){
value = element[[var]]
if(typeof(value)=="character"){
df[[var]] <- element[[var]]
}
# Otherwise, we need to check whether "Obs" is a list of observations,
# or a list containing the attributes of one observation
}else{
obs = element[[var]]
single.ob <- FALSE
for(ob in obs){
if(typeof(ob)=="list"){
multivar <- paste0("value.",ob$`@TIME_PERIOD`)
df[[multivar]] <- ob$`@OBS_VALUE`
}else{
single.ob <- TRUE
}
}
if(single.ob){
multivar <- paste0("value.",obs$`@TIME_PERIOD`)
df[[multivar]] <- obs$`@OBS_VALUE`
}
}
}
dfList[[dfIndex]] <- df
dfIndex = dfIndex + 1
}
}
full.df <- data.frame(rbindlist(dfList,fill=TRUE))
#Reorder the value columns if at least 2 and we're counting years
if(sum(grepl("value.",names(full.df)))>1 & substr(params,1,1)=="A"){
valueOrder <- order(as.numeric(substr(names(full.df)[which(substr(names(full.df),1,6)=="value.")],7,10)))
full.df[,(length(full.df)+1-length(valueOrder)):length(full.df)] <- full.df[,(length(full.df)+1-length(valueOrder)):length(full.df)][,valueOrder]
}
if(reshape){
full.df <- reshape(full.df,idvar="X.REF_AREA",timevar="year",direction="long",varying=names(full.df)[which(substr(names(full.df),1,6)=="value.")])
}
return(full.df)
}
rm(list.of.packages,new.packages)
### How to use:
#1. Get db.keys from imfDB function
# dbs <- imfDB()
#2. Use db.key from step 1 to find codelist using imfCL function
# gfsrCL <- imfCL("GFSR")
#3. Use codelist dimensions from step 2 to construct parameters for imfDF function
# gfsrDF <- imfDF("GFSR","A..S1311B.XDC.W0_S1_G1","2000","2017")
### How to construct imfDF params argument:
# {frequency}.{item1 from dimension1}+{item2 from dimension1}+{item N from dimension1}.{item1 from
# dimension2}+{item2 from dimension2}+{item M from dimension2}.{etc}
# Leave a blank string for wildcard filters. In the above example "A..S1311B" is filtering wildcard for
# the second dimension (ref_area)
### How to use intermediate functions (not exported, check source):
# gfsrDS <- imfDS("GFSR")
# cd <- imfCD("GFSR","A..S1311B.XDC.W0_S1_G1","2014","2016")
### How to source this package:
#source("https://raw.githubusercontent.com/akmiller01/alexm-util/master/DevInit/R/imf_sdmx_func.R")
### Help docs:
# http://datahelp.imf.org/knowledgebase/articles/788715-data-services-how-to-get-the-code-of-a-dataset-an
# http://datahelp.imf.org/knowledgebase/articles/667681-using-json-restful-web-service
# http://dataservices.imf.org/REST/SDMX_JSON.svc/help
# http://datahelp.imf.org/knowledgebase/articles/937155-how-to-query-large-datasets-with-data-services
list.of.packages <- c("RCurl", "rjson","data.table","reshape")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(RCurl)
library(rjson)
library(data.table)
library(reshape)
imfDB <- function(){
user_agent = "di-imf-rsdmx/0.0.1"
data_flow_url = "http://dataservices.imf.org/REST/SDMX_JSON.svc/Dataflow"
content <- getURL(data_flow_url, httpheader = list('User-Agent' = user_agent), ssl.verifypeer = FALSE, .encoding = "UTF-8")
Sys.sleep(1)
rawJson <- fromJSON(content)
structure <- rawJson$Structure
dataflows <- structure$Dataflows$Dataflow
db.key <- c()
db.name <- c()
for(dataflow in dataflows){
db.key <- c(db.key,dataflow$KeyFamilyRef$KeyFamilyID)
db.name <- c(db.name,dataflow$Name$`#text`)
}
df <- data.frame(db.key,db.name)
return(df)
}
imfDS <- function(db.key){
user_agent = "di-imf-rsdmx/0.0.1"
ds_base_url = "http://dataservices.imf.org/REST/SDMX_JSON.svc/DataStructure/"
ds_url <- paste0(ds_base_url,db.key)
dsContent <- getURL(ds_url, httpheader = list('User-Agent' = user_agent), ssl.verifypeer = FALSE, .encoding = "UTF-8")
Sys.sleep(1)
#Clean unescaped quotes by removing HTML tags
dsContent = gsub("\\<[^>]*>", "", dsContent, perl=TRUE)
ds <- fromJSON(dsContent)$Structure
return(ds)
}
imfCL <- function(db.key){
# user_agent = "di-imf-rsdmx/0.0.1"
# cl_base_url = "http://dataservices.imf.org/REST/SDMX_JSON.svc/CodeList/"
# ds <- imfDS(db.key)
# codelistIDs <- ds$CodeLists$CodeList
# codelists <- list()
# for(codelistID in codelistIDs){
#   message(codelistID$`@id`)
#   cl_url <- paste0(cl_base_url,codelistID$`@id`)
#   clContent <- getURL(cl_url, httpheader = list('User-Agent' = user_agent), ssl.verifypeer = FALSE, .encoding = "UTF-8")
#   Sys.sleep(1)
#   cl <- fromJSON(clContent)$Structure$CodeLists$CodeList
#   codelists[[codelistID$`@id`]] <- cl
# }
# return(codelists)
listOfLists <- list()
lolIndex <- 1
ds <- imfDS(db.key)
codelists <- ds$CodeLists$CodeList
for(codelist in codelists){
dim.name <- codelist$Name$`#text`
dim.code <- codelist$`@id`
for(code in codelist$Code){
code.val <- code$`@value`
code.desc <- code$Description$`#text`
df <- data.frame(dim.name,dim.code,code.val,code.desc)
listOfLists[[lolIndex]] <- df
lolIndex <- lolIndex + 1
}
}
output.df <- rbindlist(listOfLists)
return(output.df)
}
imfCD <- function(db.key,params="",startPeriod="",endPeriod=""){
user_agent = "di-imf-rsdmx/0.0.1"
cd_base_url = "http://dataservices.imf.org/REST/SDMX_JSON.svc/CompactData/"
cd_url <- paste0(cd_base_url,db.key,"/",params)
if(startPeriod!=""){
if(endPeriod!=""){
cd_url <- paste0(cd_url,"?startPeriod=",startPeriod,"&endPeriod=",endPeriod)
}
else{
cd_url <- paste0(cd_url,"?startPeriod=",startPeriod)
}
}else{
if(endPeriod!=""){
cd_url <- paste0(cd_url,"?endPeriod=",endPeriod)
}
}
cdContent <- getURL(cd_url, httpheader = list('User-Agent' = user_agent), ssl.verifypeer = FALSE, .encoding = "UTF-8")
Sys.sleep(1)
cd <- fromJSON(cdContent)
return(cd)
}
imfDF <- function(db.key,params="",startPeriod="",endPeriod="",reshape=TRUE){
dfList <- list()
dfIndex <- 1
cd <- imfCD(db.key,params,startPeriod,endPeriod)
series <- cd$CompactData$DataSet$Series
# Special case for series being a single list
if("@FREQ" %in% names(series)){
df <- data.frame(db.key)
for(var in names(series)){
# For those not named "obs" we can assign them to vars right away
if(var!="Obs"){
value = series[[var]]
if(typeof(value)=="character"){
df[[var]] <- series[[var]]
}
# Otherwise, we need to check whether "Obs" is a list of observations,
# or a list containing the attributes of one observation
}else{
obs = series[[var]]
single.ob <- FALSE
for(ob in obs){
if(typeof(ob)=="list"){
multivar <- paste0("value.",ob$`@TIME_PERIOD`)
df[[multivar]] <- ob$`@OBS_VALUE`
}else{
single.ob <- TRUE
}
}
if(single.ob){
multivar <- paste0("value.",obs$`@TIME_PERIOD`)
df[[multivar]] <- obs$`@OBS_VALUE`
}
}
}
dfList[[dfIndex]] <- df
dfIndex = dfIndex + 1
}else{
# Each element is like a row, except it can contain more than one observation
for(element in series){
df <- data.frame(db.key)
for(var in names(element)){
# For those not named "obs" we can assign them to vars right away
if(var!="Obs"){
value = element[[var]]
if(typeof(value)=="character"){
df[[var]] <- element[[var]]
}
# Otherwise, we need to check whether "Obs" is a list of observations,
# or a list containing the attributes of one observation
}else{
obs = element[[var]]
single.ob <- FALSE
for(ob in obs){
if(typeof(ob)=="list"){
multivar <- paste0("value.",ob$`@TIME_PERIOD`)
df[[multivar]] <- ob$`@OBS_VALUE`
}else{
single.ob <- TRUE
}
}
if(single.ob){
multivar <- paste0("value.",obs$`@TIME_PERIOD`)
df[[multivar]] <- obs$`@OBS_VALUE`
}
}
}
dfList[[dfIndex]] <- df
dfIndex = dfIndex + 1
}
}
full.df <- data.frame(rbindlist(dfList,fill=TRUE))
#Reorder the value columns if at least 2 and we're counting years
if(sum(grepl("value.",names(full.df)))>1 & substr(params,1,1)=="A"){
valueOrder <- order(as.numeric(substr(names(full.df)[which(substr(names(full.df),1,6)=="value.")],7,10)))
full.df[,(length(full.df)+1-length(valueOrder)):length(full.df)] <- full.df[,(length(full.df)+1-length(valueOrder)):length(full.df)][,valueOrder]
}
if(reshape){
full.df <- reshape(full.df,idvar="X.REF_AREA",timevar="year",direction="long",varying=names(full.df)[which(substr(names(full.df),1,6)=="value.")])
}
return(full.df)
}
rm(list.of.packages,new.packages)
### How to use:
#1. Get db.keys from imfDB function
# dbs <- imfDB()
#2. Use db.key from step 1 to find codelist using imfCL function
# gfsrCL <- imfCL("GFSR")
#3. Use codelist dimensions from step 2 to construct parameters for imfDF function
# gfsrDF <- imfDF("GFSR","A..S1311B.XDC.W0_S1_G1","2000","2017")
### How to construct imfDF params argument:
# {frequency}.{item1 from dimension1}+{item2 from dimension1}+{item N from dimension1}.{item1 from
# dimension2}+{item2 from dimension2}+{item M from dimension2}.{etc}
# Leave a blank string for wildcard filters. In the above example "A..S1311B" is filtering wildcard for
# the second dimension (ref_area)
### How to use intermediate functions (not exported, check source):
# gfsrDS <- imfDS("GFSR")
# cd <- imfCD("GFSR","A..S1311B.XDC.W0_S1_G1","2014","2016")
### How to source this package:
#source("https://raw.githubusercontent.com/akmiller01/alexm-util/master/DevInit/R/imf_sdmx_func.R")
### Help docs:
# http://datahelp.imf.org/knowledgebase/articles/788715-data-services-how-to-get-the-code-of-a-dataset-an
# http://datahelp.imf.org/knowledgebase/articles/667681-using-json-restful-web-service
# http://dataservices.imf.org/REST/SDMX_JSON.svc/help
# http://datahelp.imf.org/knowledgebase/articles/937155-how-to-query-large-datasets-with-data-services
df <- imfDF("MCDREO","A..GGRXO_GDPXO_PT","2000","2020",reshape=FALSE)
View(df)
df <- imfDF("MCDREO","A..GGRXO_GDPXO_PT","2000","2020")
View(df)
df <- imfDF("MCDREO","A..GGRXO_GDPXO_PT","2000","2020",reshape=FALSE)
names(df)
df <- imfDF("MCDREO","A..GGRXO_GDPXO_PT","2000","2020")
names(df)
View(df)
ae <- subset(df,X.REF_AREA=="AE")
plot(ae$value)
plot(ae$value,type="l")
plot(year~value,type="l",data=ae)
plot(value~year,type="l",data=ae)
source("C:/git/alexm-util/DevInit/R/imf_sdmx_func.R")
source("C:/git/alexm-util/DevInit/R/imf_sdmx_func.R")
df <- imfDF("MCDREO","A..GGRXO_GDPXO_PT","2000","2020",reorder=FALSE,reshape=TRUE)
ae <- subset(df,X.REF_AREA=="AE")
plot(value~year,type="l",data=ae)
df <- imfDF("MCDREO","A..GGRXO_GDPXO_PT","2000","2020")
ae <- subset(df,X.REF_AREA=="AE")
plot(value~year,type="l",data=ae)
cl <- imfCL("GFSR")
View(cl)
plot(df,aes(x=value,y=year,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
ggplot(df,aes(x=value,y=year,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
library(ggplot2)
ggplot(df,aes(x=value,y=year,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
ggplot(df,aes(x=year,y=value,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
unique(df$X.REF_AREA)
ggplot(subset(df,nchar(X.REF_AREA)==2),aes(x=year,y=value,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
isos <- c("AE","AZ","DJ","EG")
ggplot(subset(df,X.REF_AREA %in% isos),aes(x=year,y=value,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
isos <- c("AE","DJ","EG")
ggplot(subset(df,X.REF_AREA %in% isos),aes(x=year,y=value,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
typeof(df$value)
df$value <- as.numeric(df$value)
isos <- c("AE","DJ","EG")
ggplot(subset(df,X.REF_AREA %in% isos),aes(x=year,y=value,colour=X.REF_AREA,group=X.REF_AREA)) + geom_line()
cl <- imfCL("MCDREO")
db <- imfDB()
aid_type_dictionary = list(
"A01" = "Aid type 1",
"A02" = "Aid type 2"
)
aid_type_dictionary[["A01"]]
aid_type_dictionary[["A01","A01"]]
aid_type_dictionary[[c("A01","A01")]]
?sapply
`[[`
?`[[`
vec = c("A01","A01")
aid_type_dictionary[vec]
vec = c("A01","A01","A02","A01")
aid_type_dictionary[vec]
recoded_vec = aid_type_dictionary[vec]
sapply(recoded_vec,`[[`,i=1)
recode = function(vec,dictionary){
return(sapply(recoded_vec,`[[`,i=1))
}
recoded_vec = recode(vec,aid_type_dictionary)
recoded_vec
vec = c("A01","A01","A02","A01",NA)
vec
aid_type_dictionary = list(
"A01" = "General budget support",
"A02" = "Sector budget support",
"B01" = "Core support to NGOs, other private bodies, PPPs and research institutes",
"B02" = "Core contributions to multilateral institutions",
"B03" = "Contributions to  specific-purpose programmes and funds managed by international organisations (multilateral, INGO)",
"B04" = "Basket funds/pooled funding",
"C01" = "Project-type interventions",
"D01" = "Donor country personnel",
"D02" = "Other technical assistance",
"E01" = "Scholarships/training in donor country",
"E02" = "Imputed student costs",
"F01" = "Debt relief",
"G01" = "Administrative costs not included elsewhere",
"H01" = "Development awareness",
"H02" = "Refugees in donor countries"
)
recode = function(vec,dictionary){
recoded_vec = dictionary[vec]
return(sapply(recoded_vec,`[[`,i=1))
}
recode(vec,aid_type_dictionary)
recode = function(vec,dictionary){
recoded_vec = dictionary[vec]
atomic_recoded_vec = sapply(recoded_vec,`[[`,i=1)
atomic_recoded_vec[which(is.null(atomic_recoded_vec))] = NA
return(atomic_recoded_vec)
}
vec = c("A01","A01","A02","A01",NA)
recode(vec,aid_type_dictionary)
is.atomic
is.atomic(recoded_vec)
dictionary = aid_type_dictionary
recoded_vec = dictionary[vec]
atomic_recoded_vec = sapply(recoded_vec,`[[`,i=1)
atomic_recoded_vec[which(is.null(atomic_recoded_vec))] = NA
atomic_recoded_vec
sapply(atomic_recoded_vec,`[[`,i=1)
sapply(atomic_recoded_vec,`[`,i=1)
unlist(atomic_recoded_vec)
recode = function(vec,dictionary){
recoded_vec = dictionary[vec]
atomic_recoded_vec = unlist(recoded_vec)
atomic_recoded_vec[which(is.null(atomic_recoded_vec))] = NA
return(atomic_recoded_vec)
}
recode(vec,dictionary)
recoded_vec = dictionary[vec]
recoded_vec
atomic_recoded_vec = unlist(recoded_vec)
atomic_recoded_vec
atomic_recoded_vec = data.table(recoded_vec)
library(data.table)
atomic_recoded_vec = data.table(recoded_vec)
View(atomic_recoded_vec)
atomic_recoded_vec[which(is.null(atomic_recoded_vec))] = NA
View(atomic_recoded_vec)
typeof(atomic_recoded_vec$recoded_vec)
NULL2NA <- function(x){
if(is.null(x)){return(NA)}
else{return(x)}
}
NULL2NA(NULL)
sapply(recoded_vec,NULL2NA)
atomic_recoded_vec = unlist(sapply(recoded_vec,NULL2NA))
atomic_recoded_vec
recode = function(vec,dictionary){
recoded_vec = dictionary[vec]
atomic_recoded_vec = unlist(sapply(recoded_vec,NULL2NA))
atomic_recoded_vec[which(is.null(atomic_recoded_vec))] = NA
return(atomic_recoded_vec)
}
recode(vec,dictionary)
crs = recode(vec,dictionary)
is.na(NULL)
is.na(NA)
is.null(NA)
library(readr)
library(Hmisc)
library(data.table)
library(openxlsx)
wd <- "C:/Users/Alex/Documents/Data/IATI/"
setwd(wd)
# iati_unsplit <- read_csv("iati_unsplit.csv")
#
# iati_unsplit <- subset(iati_unsplit,
#   (!is.na(sector_code))
#   & (!is.na(recipient_code))
# )
#
# iati_unsplit_sum <- sum(iati_unsplit$value,na.rm=TRUE)
iati <- read_csv("iati.csv")
describe(iati$incoming)
names(iati)
incoming_table <- data.table(iati)[,.(incoming=mean(incoming)),by=.(from_di_id)]
incoming_table <- data.table(iati)[,.(incoming=mean(incoming=="True")),by=.(from_di_id)]
View(incoming_table)
setwd("C:/git/iati_flat_testing/output/")
write.csv(incoming_table,"incoming_table.csv",row.names=FALSE)
